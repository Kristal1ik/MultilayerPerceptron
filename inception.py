from torch.nn import Module, Sequential, Conv2d, MaxPool2d
from torch import cat
import torch


def set_seed():
    import random
    import numpy as np
    import torch

    SEED = 0

    random.seed(SEED)
    np.random.seed(SEED)
    torch.manual_seed(SEED)


class InceptionBlock(Module):
    def __init__(self, c_in, c_1, c_2, c_3):
        # Необходимый для проверки корректности работы inception-блока код.
        set_seed()

        super().__init__()

        self.c1 = Conv2d(kernel_size=1, in_channels=c_in, out_channels=c_1)

        self.c5 = Conv2d(kernel_size=1, in_channels=c_in, out_channels=c_1)
        self.c2 = Conv2d(kernel_size=3, in_channels=c_1, out_channels=c_2, padding=1)

        self.c6 = Conv2d(kernel_size=1, in_channels=c_in, out_channels=c_1)
        self.c3 = Conv2d(kernel_size=5, in_channels=c_1, out_channels=c_3, padding=2)

        self.mp1 = MaxPool2d(kernel_size=3, stride=1, padding=1)
        self.c4 = Conv2d(kernel_size=1, in_channels=c_in, out_channels=c_1)

        # Полная ветка блока со свёрткой 3x3.
        self.block_3_3 = Sequential(
            self.c5,
            self.c2,
        )

        # Полная ветка блока со свёрткой 5x5.
        self.block_5_5 = Sequential(
            self.c6,
            self.c3,
        )

        # Полная ветка блока с MaxPooling 2D.
        self.block_pool = Sequential(
            self.mp1,
            self.c4,
        )

    def forward(self, x):  # bs x c x h x w
        # В качестве результата работы inception-блок возвращает
        # соединение по размерности каналов результатов работы внутренних
        # свёрток и MaxPooling 2D.
        return cat([
            self.c1(x),
            self.block_3_3(x),
            self.block_5_5(x),
            self.block_pool(x),
        ], dim=1)


# int_ = InceptionBlock(4, 10, 20, 30)
#
# x = torch.tensor([[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0]],
#                          [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
#                           [0, 0, 0, 0], [0, 0, 0, 0]]]).type(torch.float)
# for i in range(3):
#     for j in range(3):
#         for k in range(3):
#             try:
#                 x1 = x.permute(i, j, k)
#                 print(int_(x1).size())
#
#             except:
#                 print("лохи")
#
# print(int_(x))
def custom_compare(x, y):
    if str(x) != str(y):
        raise RuntimeError(f'Ожидаемое значение: {y}. Фактическое: {x}')


def to_list(x, precision=2):
    return [round(x, precision) for x in x.tolist()]


def to_list_m(m, precision=2):
    res = []

    for l in m.tolist():
        res.append([round(x, precision) for x in l])

    return res


def inception_block_test():
    example_1_x = torch.tensor([[[[0.28, 0.48],
                                  [0.82, 1.0]]
                                 ]])
    example_1_res = [-0.83, -0.83, -0.83, -0.83, -0.59, -0.48, -0.3, -0.2, 0.35, 0.69, 0.27, 0.58, -0.14, -0.15, -0.09,
                     -0.05, 0.23, -0.1, -0.14, -0.33, -0.15, -0.15, -0.15, -0.15, 0.74, 0.74, 0.74, 0.74]

    inception_block_1 = InceptionBlock(1, 2, 1, 2)

    custom_compare(to_list(inception_block_1(example_1_x)), example_1_res)

    example_2_x = [0.26, 0.37, 0.18, 0.56, 0.94, 0.91, 0.62, 0.21, 0.2, 0.75, 0.75, 0.01, 0.79, 0.62, 0.33, 0.31]
    example_2_x = torch.tensor(example_2_x).reshape(2, 2, 2, 2)

    example_2_res = [-0.23, -0.24, -0.35, -0.51, 0.09, 0.08, -0.02, -0.04, -0.17, -0.08, -0.15, -0.17, 0.63, 0.63, 0.63,
                     0.63, -0.28, -0.35, -0.46, -0.46, 0.1, 0.11, 0.01, -0.12, -0.2, -0.07, -0.14, -0.2, 0.49, 0.49,
                     0.49, 0.49]

    inception_block_2 = InceptionBlock(2, 1, 1, 1)

    custom_compare(to_list(inception_block_2(example_2_x)), example_2_res)

    print('Тесты прошли успешно!')


inception_block_test()
